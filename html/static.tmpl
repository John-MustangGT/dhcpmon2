<script type="text/javascript" class="init">
$(document).ready(function() {
    // Initialize DataTable
    var table = $('#StaticDHCP').DataTable({
        "scrollY": "70vh",
        "scrollCollapse": true,
        "paging": false,
        "ajax": {
            "url": "/api/static",
            "type": "GET",
            "cache": false,
            "dataSrc": "data"
        },
        "language": {"emptyTable": "No static DHCP entries"},
        "columns": [
            {
                "title": "Enabled",
                "data": "enabled",
                "render": function(data, type, row) {
                    var checked = data ? 'checked' : '';
                    var disabled = {{if not .EnableEdit}}true{{else}}false{{end}};
                    return '<input type="checkbox" class="enable-checkbox" ' + 
                           'data-id="' + row.id + '" ' + checked + 
                           (disabled ? ' disabled' : '') + '>';
                }
            },
            {
                "title": "MAC Address",
                "data": "mac",
                "render": function(data, type, row) {
                    return '<span class="mac-address">' + data + '</span>';
                }
            },
            {
                "title": "IP Address",
                "data": "ip",
                "render": function(data, type, row) {
                    if (!data) return '<span class="text-muted">-</span>';
                    return '<span class="ip-address">' + data + '</span>';
                }
            },
            {
                "title": "Hostname",
                "data": "hostname",
                "render": function(data, type, row) {
                    if (!data) return '<span class="text-muted">-</span>';
                    return '<span class="hostname">' + data + '</span>';
                }
            },
            {
                "title": "Tag",
                "data": "tag",
                "render": function(data, type, row) {
                    if (!data) return '<span class="text-muted">-</span>';
                    return '<span class="badge bg-secondary">' + data + '</span>';
                }
            },
            {
                "title": "Lease Time",
                "data": "leaseTime",
                "render": function(data, type, row) {
                    if (!data) return '<span class="text-muted">Default</span>';
                    return '<span class="lease-time">' + data + '</span>';
                }
            },
            {
                "title": "Comment",
                "data": "comment",
                "render": function(data, type, row) {
                    if (!data) return '<span class="text-muted">-</span>';
                    return '<span class="comment">' + data + '</span>';
                }
            },
            {{if .EnableEdit}}
            {
                "title": "Actions",
                "data": null,
                "orderable": false,
                "render": function(data, type, row) {
                    return '<div class="btn-group btn-group-sm" role="group">' +
                           '<button type="button" class="btn btn-outline-primary edit-btn" data-id="' + row.id + '">✎</button>' +
                           '<button type="button" class="btn btn-outline-danger delete-btn" data-id="' + row.id + '">✗</button>' +
                           '</div>';
                }
            }
            {{end}}
        ]
    });

    {{if .EnableEdit}}
    // Add new entry button
    $('#add-entry-btn').click(function() {
        showEditModal();
    });

    // Edit button click handler
    $('#StaticDHCP').on('click', '.edit-btn', function() {
        var id = $(this).data('id');
        var rowData = table.row($(this).parents('tr')).data();
        showEditModal(rowData);
    });

    // Delete button click handler
    $('#StaticDHCP').on('click', '.delete-btn', function() {
        var id = $(this).data('id');
        var rowData = table.row($(this).parents('tr')).data();
        
        if (confirm('Are you sure you want to delete this static DHCP entry?')) {
            deleteEntry(id);
        }
    });

    // Enable/disable checkbox handler
    $('#StaticDHCP').on('change', '.enable-checkbox', function() {
        var id = $(this).data('id');
        var enabled = $(this).is(':checked');
        
        if (enabled) {
            enableEntry(id);
        } else {
            disableEntry(id);
        }
    });

    // Save configuration button
    $('#save-config-btn').click(function() {
        saveConfiguration();
    });

    // Reload configuration button
    $('#reload-config-btn').click(function() {
        reloadConfiguration();
    });

    // Validate configuration button
    $('#validate-config-btn').click(function() {
        validateConfiguration();
    });
    {{end}}

    // Refresh table every 30 seconds
    setInterval(function() {
        table.ajax.reload(null, false);
    }, 30000);
});

{{if .EnableEdit}}
// Show edit modal
function showEditModal(data) {
    var modal = $('#editModal');
    var form = $('#editForm');
    
    if (data) {
        // Edit existing entry
        modal.find('.modal-title').text('Edit Static DHCP Entry');
        form.find('#entry-id').val(data.id);
        form.find('#entry-mac').val(data.mac);
        form.find('#entry-ip').val(data.ip || '');
        form.find('#entry-hostname').val(data.hostname || '');
        form.find('#entry-tag').val(data.tag || '');
        form.find('#entry-lease-time').val(data.leaseTime || '');
        form.find('#entry-comment').val(data.comment || '');
        form.find('#entry-enabled').prop('checked', data.enabled);
    } else {
        // Add new entry
        modal.find('.modal-title').text('Add Static DHCP Entry');
        form[0].reset();
        form.find('#entry-id').val('');
        form.find('#entry-enabled').prop('checked', true);
    }
    
    modal.modal('show');
}

// Save entry
function saveEntry() {
    var form = $('#editForm');
    var id = form.find('#entry-id').val();
    
    var entry = {
        mac: form.find('#entry-mac').val(),
        ip: form.find('#entry-ip').val() || null,
        hostname: form.find('#entry-hostname').val() || '',
        tag: form.find('#entry-tag').val() || '',
        leaseTime: form.find('#entry-lease-time').val() || '',
        comment: form.find('#entry-comment').val() || '',
        enabled: form.find('#entry-enabled').is(':checked')
    };
    
    var action = id ? 'update' : 'add';
    var requestData = {
        action: action,
        entry: entry
    };
    
    if (id) {
        requestData.id = id;
    }
    
    $.ajax({
        url: '/api/static',
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify(requestData),
        success: function(response) {
            if (response.success) {
                $('#editModal').modal('hide');
                $('#StaticDHCP').DataTable().ajax.reload();
                showAlert('success', response.message);
            } else {
                showAlert('danger', response.message);
            }
        },
        error: function(xhr) {
            var response = JSON.parse(xhr.responseText);
            showAlert('danger', response.message || 'An error occurred');
        }
    });
}

// Delete entry
function deleteEntry(id) {
    $.ajax({
        url: '/api/static',
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({
            action: 'delete',
            id: id
        }),
        success: function(response) {
            if (response.success) {
                $('#StaticDHCP').DataTable().ajax.reload();
                showAlert('success', response.message);
            } else {
                showAlert('danger', response.message);
            }
        },
        error: function(xhr) {
            var response = JSON.parse(xhr.responseText);
            showAlert('danger', response.message || 'An error occurred');
        }
    });
}

// Enable entry
function enableEntry(id) {
    $.ajax({
        url: '/api/static',
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({
            action: 'enable',
            id: id
        }),
        success: function(response) {
            if (response.success) {
                showAlert('success', response.message);
            } else {
                showAlert('danger', response.message);
                // Revert checkbox state
                $('input[data-id="' + id + '"]').prop('checked', false);
            }
        },
        error: function(xhr) {
            var response = JSON.parse(xhr.responseText);
            showAlert('danger', response.message || 'An error occurred');
            // Revert checkbox state
            $('input[data-id="' + id + '"]').prop('checked', false);
        }
    });
}

// Disable entry
function disableEntry(id) {
    $.ajax({
        url: '/api/static',
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({
            action: 'disable',
            id: id
        }),
        success: function(response) {
            if (response.success) {
                showAlert('success', response.message);
            } else {
                showAlert('danger', response.message);
                // Revert checkbox state
                $('input[data-id="' + id + '"]').prop('checked', true);
            }
        },
        error: function(xhr) {
            var response = JSON.parse(xhr.responseText);
            showAlert('danger', response.message || 'An error occurred');
            // Revert checkbox state
            $('input[data-id="' + id + '"]').prop('checked', true);
        }
    });
}

// Save configuration
function saveConfiguration() {
    $.ajax({
        url: '/api/static',
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({
            action: 'save'
        }),
        success: function(response) {
            if (response.success) {
                showAlert('success', response.message);
            } else {
                showAlert('danger', response.message);
            }
        },
        error: function(xhr) {
            var response = JSON.parse(xhr.responseText);
            showAlert('danger', response.message || 'An error occurred');
        }
    });
}

// Reload configuration
function reloadConfiguration() {
    $.ajax({
        url: '/api/static',
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({
            action: 'reload'
        }),
        success: function(response) {
            if (response.success) {
                $('#StaticDHCP').DataTable().ajax.reload();
                showAlert('success', response.message);
            } else {
                showAlert('danger', response.message);
            }
        },
        error: function(xhr) {
            var response = JSON.parse(xhr.responseText);
            showAlert('danger', response.message || 'An error occurred');
        }
    });
}

// Validate configuration
function validateConfiguration() {
    $.ajax({
        url: '/api/static',
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({
            action: 'validate'
        }),
        success: function(response) {
            if (response.success) {
                showAlert('success', response.message);
            } else {
                var errorMsg = response.message;
                if (response.errors && response.errors.length > 0) {
                    errorMsg += '<br><ul>';
                    response.errors.forEach(function(error) {
                        errorMsg += '<li>' + error + '</li>';
                    });
                    errorMsg += '</ul>';
                }
                showAlert('warning', errorMsg);
            }
        },
        error: function(xhr) {
            var response = JSON.parse(xhr.responseText);
            showAlert('danger', response.message || 'An error occurred');
        }
    });
}

// Show alert message
function showAlert(type, message) {
    var alertHtml = '<div class="alert alert-' + type + ' alert-dismissible fade show" role="alert">' +
                    message +
                    '<button type="button" class="btn-close" data-bs-dismiss="alert"></button>' +
                    '</div>';
    
    $('#alerts-container').append(alertHtml);
    
    // Auto-hide after 5 seconds
    setTimeout(function() {
        $('#alerts-container .alert:first').fadeOut(function() {
            $(this).remove();
        });
    }, 5000);
}
{{end}}
</script>

<!-- Alerts container -->
<div id="alerts-container" class="mb-3"></div>

<!-- Control buttons -->
{{if .EnableEdit}}
<div class="mb-3">
    <div class="btn-group" role="group">
        <button type="button" class="btn btn-success" id="add-entry-btn">
            <i class="fas fa-plus"></i> Add Entry
        </button>
        <button type="button" class="btn btn-primary" id="save-config-btn">
            <i class="fas fa-save"></i> Save Configuration
        </button>
        <button type="button" class="btn btn-secondary" id="reload-config-btn">
            <i class="fas fa-sync-alt"></i> Reload
        </button>
        <button type="button" class="btn btn-info" id="validate-config-btn">
            <i class="fas fa-check-circle"></i> Validate
        </button>
    </div>
</div>
{{end}}

<!-- Static DHCP table -->
<table id="StaticDHCP" class="table table-striped table-hover" style="width:100%">
</table>

{{if .EnableEdit}}
<!-- Edit Modal -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit Static DHCP Entry</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editForm">
                    <input type="hidden" id="entry-id">
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="entry-mac" class="form-label">MAC Address *</label>
                                <input type="text" class="form-control" id="entry-mac" 
                                       placeholder="00:11:22:33:44:55" required
                                       pattern="^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$">
                                <div class="form-text">Format: XX:XX:XX:XX:XX:XX or XX-XX-XX-XX-XX-XX</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="entry-ip" class="form-label">IP Address</label>
                                <input type="text" class="form-control" id="entry-ip" 
                                       placeholder="192.168.1.100"
                                       pattern="^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$">
                                <div class="form-text">Leave empty for hostname-only reservation</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="entry-hostname" class="form-label">Hostname</label>
                                <input type="text" class="form-control" id="entry-hostname" 
                                       placeholder="device-name">
                                <div class="form-text">Optional hostname for the device</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="entry-tag" class="form-label">Network Tag</label>
                                <input type="text" class="form-control" id="entry-tag" 
                                       placeholder="network-tag">
                                <div class="form-text">Optional network tag for classification</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="entry-lease-time" class="form-label">Lease Time</label>
                                <input type="text" class="form-control" id="entry-lease-time" 
                                       placeholder="infinite">
                                <div class="form-text">e.g., 12h, 1d, infinite (leave empty for default)</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="entry-comment" class="form-label">Comment</label>
                                <input type="text" class="form-control" id="entry-comment" 
                                       placeholder="Optional comment">
                                <div class="form-text">Description or notes about this entry</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" id="entry-enabled" checked>
                            <label class="form-check-label" for="entry-enabled">
                                Enable this entry
                            </label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveEntry()">Save Entry</button>
            </div>
        </div>
    </div>
</div>
{{end}}

<!-- vim: noai:ts=2:sw=2:set expandtab: -->

